#!/bin/bash
set -euo pipefail

HOMEDIR=~
WORKSPACE_PATH=~/Workspace
BOX_HOSTNAME=`cat .hostname`

pp() {
  echo "====> EXECUTING STEP: $1"
}

create_workspace_folder() {
  mkdir -p $WORKSPACE_PATH
}

clone_app() {
  APP=$1
  HTTPS_URL="https://github.com/henrylawson/$APP.git"
  GIT_URL=git@github.com:henrylawson/$APP.git

  if [ -d "$WORKSPACE_PATH/$APP" ]
  then
    cd "$WORKSPACE_PATH/$APP"
    git remote set-url origin $GIT_URL
    git pull --rebase
    return 0
  fi

  cd $WORKSPACE_PATH
  git clone $HTTPS_URL
  cd $APP
  git remote set-url origin $GIT_URL
}

configure_dotbash() {
  ln -sfn $WORKSPACE_PATH/dotbash/bashrc ~/.bashrc
  ln -sfn $WORKSPACE_PATH/dotbash/bash_profile ~/.bash_profile
  ln -sfn $WORKSPACE_PATH/dotbash/bash ~/.bash
  ln -sfn $WORKSPACE_PATH/dotbash/inputrc ~/.inputrc
  ln -sfn $WORKSPACE_PATH/dotbash/tmux.conf ~/.tmux.conf
  chmod 755 ~/.bash/bin/*

  echo $BOX_HOSTNAME > $WORKSPACE_PATH/dotbash/.hostname
}

install_native_apps() {
  mkdir -p "${WORKSPACE_PATH}/dotbash/configs/${BOX_HOSTNAME}"

  cd "${WORKSPACE_PATH}/dotbash/configs/${BOX_HOSTNAME}"
  touch packages.txt
  xargs sudo apt --yes install < packages.txt

  sudo mkdir -p /opt/user
  sudo chown "${USER}" /opt/user
}

install_manual_apps() {
  if [[ -f "${WORKSPACE_PATH}/dotbash/configs/${BOX_HOSTNAME}/install.sh" ]]
  then
    bash -c "${WORKSPACE_PATH}/dotbash/configs/${BOX_HOSTNAME}/install.sh"
  else
    echo "Skipping, no custom install script found"
  fi
}

install_pip_apps() {
  if hash pip 2>/dev/null
  then
    if [[ -f "${WORKSPACE_PATH}/dotbash/configs/${BOX_HOSTNAME}/requirements.txt" ]]
    then
      pip install --user -r "${WORKSPACE_PATH}/dotbash/configs/${BOX_HOSTNAME}/requirements.txt"
    else
      echo "Skippping, no requirements.txt file found"
    fi
  fi
}

manually_configure_apps() {
  local manual_config="${WORKSPACE_PATH}/dotbash/configs/${BOX_HOSTNAME}/manual_config.txt"
  if [[ -f "${manual_config}" ]]
  then
    cat "${manual_config}"
  else
    echo "No steps to perform"
  fi
}

configure_dotvim() {
  ln -sfn $WORKSPACE_PATH/dotvim/gvimrc ~/.gvimrc
  ln -sfn $WORKSPACE_PATH/dotvim/vimrc ~/.vimrc
  [[ -L ~/.vim  ]] || rm -rf ~/.vim
  ln -sfn $WORKSPACE_PATH/dotvim/vim ~/.vim
  ln -sfn $WORKSPACE_PATH/dotvim/ctags ~/.ctags
}

configure_dotgit() {
  ln -sfn $WORKSPACE_PATH/dotgit/gitconfig ~/.gitconfig
  ln -sfn $WORKSPACE_PATH/dotgit/gitignore ~/.gitignore
}

symlink_drive() {
  ln -sfn /Volumes/GoogleDrive/My\ Drive/Dotfiles/GnuPG ~/.gnupg
  rm -rf ~/.ssh
  ln -sfn /Volumes/GoogleDrive/My\ Drive/Dotfiles/SSH ~/.ssh
}

update_all_apps() {
  $WORKSPACE_PATH/dotbash/bash/bin/updateall
}

install_gcloud_sdk() {
  if ls ~/google-cloud-sdk/path.bash.inc 2>/dev/null
  then
    return 0
  fi

  curl -H 'Cache-Control: no-cache' https://sdk.cloud.google.com > /tmp/gcpsdk
  bash /tmp/gcpsdk --disable-prompts
  rm /tmp/gcpsdk
  source ~/google-cloud-sdk/path.bash.inc
  gcloud components install \
    kubectl \
    --quiet || true
  $(gcloud info --format="value(basic.python_location)") -m pip install numpy
}

clean_up() {
  rm -rf "${WORKSPACE_PATH}/dotbash/configs/${BOX_HOSTNAME}/default.profraw"
}

pp "Creating workspace folder"        && create_workspace_folder
pp "Downloading dotbash"              && clone_app dotbash
pp "Installing native applications"   && install_native_apps
pp "Installing manual applications"   && install_manual_apps
pp "Installing pip applications"      && install_pip_apps
pp "Installing gcloud sdk"            && install_gcloud_sdk
pp "Configuring dotbash"              && configure_dotbash
pp "Downloading dotvim"               && clone_app dotvim
pp "Configuring dotvim"               && configure_dotvim
pp "Downloading dotgit"               && clone_app dotgit
pp "Configuring dotgit"               && configure_dotgit
pp "Update all applications"          && update_all_apps
pp "Manually configure apps"          && manually_configure_apps
pp "Cleanup" && clean_up
